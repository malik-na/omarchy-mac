#!/bin/bash
# Generate a patch to replace #embed with inline string for GCC 14 compatibility
# This script should be run in the Hyprland source directory after extraction

set -e

if [[ ! -f "example/hyprland.conf" ]]; then
    echo "ERROR: Must be run from Hyprland source directory"
    echo "  (example/hyprland.conf not found)"
    exit 1
fi

if [[ ! -f "src/config/defaultConfig.hpp" ]]; then
    echo "ERROR: src/config/defaultConfig.hpp not found"
    exit 1
fi

echo "Generating GCC 14 compatibility patch for defaultConfig.hpp..."

# Read the example config and escape it for C++ raw string literal
CONFIG_CONTENT=$(cat example/hyprland.conf)

# Create backup
cp src/config/defaultConfig.hpp src/config/defaultConfig.hpp.orig

# Generate the new file
cat > src/config/defaultConfig.hpp << 'HEADER_EOF'
#pragma once

#include <string>

inline constexpr std::string_view AUTOGENERATED_PREFIX   = R"#(
#######################################################################################
# AUTOGENERATED HYPRLAND CONFIG.
# EDIT THIS CONFIG ACCORDING TO THE WIKI INSTRUCTIONS.
#######################################################################################

autogenerated = 1 # remove this line to remove the warning

)#";

// GCC 14 compatibility: Replaced #embed with inline string
// #embed requires GCC 15+ (C++26 feature not available in GCC 14.2.1 on ARM)
// This approach matches Hyprland 0.49.0 methodology
inline const std::string EXAMPLE_CONFIG = R"#(
HEADER_EOF

# Append the config content
cat example/hyprland.conf >> src/config/defaultConfig.hpp

# Close the raw string literal
cat >> src/config/defaultConfig.hpp << 'FOOTER_EOF'
)#";
FOOTER_EOF

echo "âœ“ Generated GCC 14 compatible defaultConfig.hpp"
echo "  Original saved as: src/config/defaultConfig.hpp.orig"
echo ""
echo "Changes:"
echo "  - Removed #embed directive (requires GCC 15+)"
echo "  - Embedded example/hyprland.conf as inline raw string literal"
echo "  - Compatible with GCC 14.2.1 (Arch Linux ARM)"
